#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>

typedef struct @ListNodeTypeName {
    struct @ListNodeTypeName* prev;
    struct @ListNodeTypeName* next;
    @ElementType data;
} @ListNodeTypeName;

typedef struct @ListTypeName {
    @ListNodeTypeName* head;
    @ListNodeTypeName* tail;
    size_t length;
} @ListTypeName;

#define @ListTypeName_NodePrev(nodePtr)   ((nodePtr)->prev)
#define @ListTypeName_NodeNext(nodePtr)   ((nodePtr)->next)
#define @ListTypeName_NodeData(nodePtr)   ((nodePtr)->data)

#define @ListTypeName_Front(listPtr)     ((listPtr)->head)
#define @ListTypeName_Back(listPtr)      ((listPtr)->tail)
#define @ListTypeName_Length(listPtr)    ((listPtr)->length)
#define @ListTypeName_IsEmpty(listPtr)   (@ListTypeName_Length(listPtr) == 0)

@ListTypeName* @ListTypeName_CreateNew(void) {
    @ListTypeName* list = (@ListTypeName*)malloc(sizeof(@ListTypeName));
    if (list == NULL) {
        return NULL;
    }

    list->head = list->tail = NULL;
    list->length = 0;
    return list;
}

void @ListTypeName_Clear(@ListTypeName* list) {
    @ListNodeTypeName* node = list->head;

    while (list->head != NULL) {
        node = node->next;
        free(list->head);
        list->head = node;
    }

    list->length = 0;
}

void @ListTypeName_Destroy(@ListTypeName* list) {
    @ListTypeName_Clear(list);
    free(list);
}

int @ListTypeName_PushBack(@ListTypeName* list, @ElementType elem) {
    @ListNodeTypeName* node = (@ListNodeTypeName*)malloc(sizeof(@ListNodeTypeName));
    if (node == NULL) {
        return 0;
    }

    node->data = elem;

    if (list->head == NULL) {
        node->prev = node->next = NULL;
        list->head = list->tail = node;
    }
    else {
        node->prev = list->tail;
        node->next = NULL;
        list->tail->next = node;
        list->tail = list->tail->next;
    }

    list->length += 1;
    return 1;
}

int @ListTypeName_PushFront(@ListTypeName* list, @ElementType elem) {
    @ListNodeTypeName* node = (@ListNodeTypeName*)malloc(sizeof(@ListNodeTypeName));
    if (node == NULL) {
        return 0;
    }

    node->data = elem;

    if (list->head == NULL) {
        node->prev = node->next = NULL;
        list->head = list->tail = node;
    }
    else {
        node->prev = NULL;
        node->next = list->head;
        list->head = node;
    }

    list->length += 1;
    return 1;
}

@ElementType* @ListTypeName_PushBackPreAlloc(@ListTypeName* list) {
    @ListNodeTypeName* node = (@ListNodeTypeName*)malloc(sizeof(@ListNodeTypeName));
    if (node == NULL) {
        return NULL;
    }

    if (list->head == NULL) {
        node->prev = node->next = NULL;
        list->head = list->tail = node;
    }
    else {
        node->prev = list->tail;
        node->next = NULL;
        list->tail->next = node;
        list->tail = list->tail->next;
    }

    list->length += 1;
    return &(node->data);
}

@ElementType* @ListTypeName_PushFrontPreAlloc(@ListTypeName* list) {
    @ListNodeTypeName* node = (@ListNodeTypeName*)malloc(sizeof(@ListNodeTypeName));
    if (node == NULL) {
        return NULL;
    }

    if (list->head == NULL) {
        node->prev = node->next = NULL;
        list->head = list->tail = node;
    }
    else {
        node->prev = NULL;
        node->next = list->head;
        list->head = node;
    }

    list->length += 1;
    return &(node->data);
}

@ListNodeTypeName* @ListTypeName_DeleteNode(@ListTypeName* list, @ListNodeTypeName* node, int isBackOrder) {
    @ListNodeTypeName* retNode;

    if (list->head == list->tail) {
        list->head = list->tail = NULL;
        retNode = NULL;
    }
    else {
        if (node == list->head) {
            list->head = node->next;
            list->head->prev = NULL;
            retNode = isBackOrder ? list->head : NULL;
        }
        else if (node == list->tail) {
            list->tail = node->prev;
            list->tail->next = NULL;
            retNode = isBackOrder ? NULL : list->tail;
        }
        else {
            node->prev->next = node->next;
            node->next->prev = node->prev;
            retNode = isBackOrder ? node->next : node->prev;
        }
    }

    free(node);
    list->length -= 1;
    return retNode;
}

void @ListTypeName_PopBack(@ListTypeName* list) {
    (void)@ListTypeName_DeleteNode(list, list->tail, 1);
}

void @ListTypeName_PopFront(@ListTypeName* list) {
    (void)@ListTypeName_DeleteNode(list, list->head, 1);
}

int main() {
    return 0;
}
